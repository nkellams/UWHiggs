# Get common recipes
recipes = ENV['fsa'] + '/PlotTools/rake/recipes.rake'
import recipes

$jobid = ENV['jobid']

# Figure out what run period we are in
$period = '8TeV'
PU = ENV['PU']
#if $jobid.include? '8TeV'
#  $period = '8TeV'
#end


################################################################################
## Sample names ################################################################
################################################################################
#
# Get sample names containing a substring
def get_sample_names(substring)
  inputs = Dir.glob("inputs/#{$jobid}/*.txt").select {|x| x.include? substring}
  inputs = inputs.map{|x| File.basename(x).sub(".txt", "")}
  return inputs
end
#
samples = Hash[
  "data_et" => Array['data_SingleElectron_Run2015C_05Oct2015_25ns', 'data_SingleElectron_Run2015D_05Oct2015_25ns', 'data_SingleElectron_Run2015D_PromptReco-v4_25ns'],
  "data_mt" => Array['data_SingleMuon_Run2015C_05Oct2015_25ns', 'data_SingleMuon_Run2015D_05Oct2015_25ns', 'data_SingleMuon_Run2015D_PromptReco-v4_25ns'],	
  "signalETau" => Array['GluGlu_LFV_HToETau_M125_13TeV_powheg_pythia8', 'VBF_LFV_HToETau_M125_13TeV_powheg_pythia8'],
  "signalMuTau" => Array['GluGlu_LFV_HToMuTau_M125_13TeV_powheg_pythia8', 'VBF_LFV_HToMuTau_M125_13TeV_powheg_pythia8'],
  "sm" => Array['GluGluHToTauTau_M125_13TeV_powheg_pythia8', 'VBFHToTauTau_M125_13TeV_powheg_pythia8'],
  "DY" => Array['DYJetsToLL_M-50_TuneCUETP8M1_13TeV-madgraphMLM-pythia8'],
  "wjets" => Array['WJetsToLNu_TuneCUETP8M1_13TeV-madgraphMLM-pythia8'],
  

  "diboson" => Array['WW_TuneCUETP8M1_13TeV-pythia8', 'WZ_TuneCUETP8M1_13TeV-pythia8', 'ZZ_TuneCUETP8M1_13TeV-pythia8'],

  "DY_amc" => Array['DYJetsToLL_M-50_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8'],
  "wjets_amc" => Array['WJetsToLNu_TuneCUETP8M1_13TeV-amcatnloFXFX-pythia8'],
  "ttbar_amc" => Array['TT_TuneCUETP8M1_13TeV-amcatnlo-pythia8'],
]


# Function to get the .root files for an analyzer and samples
def get_analyzer_results(analyzer, the_samples)
  output = Array.new
  analyzer_base = analyzer.sub('.py', '')
  the_samples.each do |sample|
    output << "results/#{$jobid}/#{analyzer_base}/#{sample}.root"
  end
  return output
end

################################################################################
## Recipes to analyze the GG channel of the LFV HToMuTau analysis
##  targets:
##     mt
################################################################################


task :analyzeMuTauMC => get_analyzer_results("AnalyzeGG5.py", samples['diboson'] + samples['wjets'] + samples['sm'] + samples['DY'] + samples['signalMuTau'])
task :analyzeMuTauData => get_analyzer_results("AnalyzeGG5.py", samples['data_mt'])

task :analyzeMuMuTau_FakeRate => get_analyzer_results("AnalyzeMuMuTauTight_FakeRate.py", samples['data_mt']  + samples['DY'])	

